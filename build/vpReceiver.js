(()=>{"use strict";const t=t=>{if(!t)return"00:00";let e=Math.floor(t/3600),s=Math.floor((t-3600*e)/60),i=Math.floor(t%60);return e?e.toString().padStart(2,"0")+":"+s.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0"):s.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0")};function e(e,s){let i=new class{constructor(e,s){this.context=null,this.playerManager=null,this.castDebugLogger=null,this.appId=s.appId,this.audio=document.querySelector(e),this.playbackConfig=null,this.controls=null,this.hls=null,this.audioObject={},this.audioContainer=this.audio.parentElement,this.playbackRate=1,this.autoplay=!1,this.receiverControls=new class{constructor(e){this.seekbar=new class{constructor(t){this.element=document.querySelector(t),this.castdebugger=null,this.show=!1}setCastDebugger(t){this.castdebugger=t}setProgress(t,e){this.element.style.width=t/e*100+"%"}showHide(t){this.castdebugger.debug("showHide",`${t} ${this.show}`),this.show?this.element.parentElement.style.display="block":setTimeout((()=>{this.element.parentElement.style.display="none"}),t)}}(".seekbar-progress"),this.timer=new class{constructor(t){this.element=document.querySelector(t),this.element.textContent="00:00 / 00:00"}update(e,s){this.element.textContent=`${t(e)} /${t(s)}`}}(".timer"),this.castDebugger=null,this.element=document.querySelector(e),this.show=!0,this.loader=document.querySelector(".loader"),this.playIcon=document.querySelector(".vp-icon-play"),this.pauseIcon=document.querySelector(".vp-icon-pause")}setCastDebugger(t){this.castDebugger=t,this.seekbar.setCastDebugger(this.castDebugger)}pause(){this.pauseIcon.style.display="none",this.playIcon.style.display="block",setTimeout((()=>{this.playIcon.style.display="none"}),2e3)}play(){this.playIcon.style.display="none",this.pauseIcon.style.display="block",setTimeout((()=>{this.pauseIcon.style.display="none"}),2e3)}update(t){this.seekbar.setProgress(t.currentTime,t.duration),this.timer.update(t.currentTime,t.duration)}hideControls(t){this.show=!1,this.showHide(t||5e3)}showControls(){this.show=!0,this.showHide(10)}showHide(t){this.show?this.element.style.display="flex":setTimeout((()=>{this.element.style.display="none"}),t)}}(".controls"),this.mediaManager=null,this.castReceiverManager=null,this.audioStarted=!1}start(){this.receiverControls.loader.style.display="none",this.onPlay()}onPlay(){this.audio.play().then((()=>{this.audioStarted?this.receiverControls.play():(this.receiverControls.showControls(),this.audioStarted=!0),this.receiverControls.hideControls(6e3)})).catch((()=>{}))}onPause(){this.audio.pause(),this.receiverControls.pause(),this.receiverControls.showControls()}addPlayerEvents(){this.audio.addEventListener("timeupdate",this.onTimeUpdate)}onTimeUpdate(){this.receiverControls.update(this.updatePlayerState())}updatePlayerState(){return{currentTime:this.audio.currentTime,duration:this.audioObject.duration}}attachMedia(){if(vpReceiver.HLSsupported=Hls.isSupported(),this.castDebugLogger.debug("inside attach media",vpReceiver.HLSsupported),this.audio.playbackRate=1,this.castDebugLogger.debug("audio file",JSON.stringify(this.audio,["id","className","tagName"])),this.audioObject.file.endsWith("mp3"))this.castDebugLogger.debug("inside mp3",this.audioObject.file),this.audio.src=this.audioObject.file,this.start();else if(vpReceiver.HLSsupported){this.castDebugLogger.debug("inside hlssupported",this.audioObject.file);try{this.hls=new Hls,this.castDebugLogger.debug("hls initialized",this.audioObject.file),this.currentTime>0&&(this.audio.currentTime=this.currentTime),this.hls.attachMedia(this.audio),this.castDebugLogger.debug("attached media",this.audioObject.file),this.hls.on(Hls.Events.MEDIA_ATTACHED,(()=>{this.castDebugLogger.debug("amedia attached",this.audioObject.file),this.hls.startLevel=0,this.castDebugLogger.debug("loading source hlssupported",this.audioObject.file),this.hls.loadSource(this.audioObject.file)})),this.hls.on(Hls.Events.MANIFEST_PARSED,((t,e)=>{this.castDebugLogger.debug("manifest parsed",this.audioObject.file),this.start()})),this.hls.on(Hls.Events.ERROR,((t,e)=>{this.castDebugLogger.debug("HLS  ERROR",e.details)}))}catch(t){this.castDebugLogger.debug("hls error",t)}}this.castDebugLogger.debug("finished attach media")}fakeinit(){const t=cast.framework.CastReceiverContext.getInstance();t.getPlayerManager(),this.castDebugLogger={debug:function(t,e){console.debug(t,e)}},this.receiverControls.setCastDebugger(this.castDebugLogger),this.audioObject.file="https://vp.gjirafa.net/vps/prod/odgehtyo/encode/vjsmylds/mp3/360p.mp3",this.attachMedia(),this.bindMethods(),this.addPlayerEvents(),t.start()}init(){this.context=cast.framework.CastReceiverContext.getInstance(),this.context.setLoggerLevel(cast.framework.LoggerLevel.DEBUG),this.playerManager=this.context.getPlayerManager(),this.playerManager.setMediaElement(this.audio),this.castDebugLogger=cast.debug.CastDebugLogger.getInstance(),this.castDebugLogger.setEnabled(!0),this.castDebugLogger.debug("hello","okej"),this.receiverControls.setCastDebugger(this.castDebugLogger),this.context.start(),this.bindMethods(),this.bindInterceptors(),this.addPlayerEvents()}onSeek(t){this.audio.currentTime=t.currentTime,this.receiverControls.showControls(),this.receiverControls.hideControls(6e3),this.receiverControls.update(this.updatePlayerState())}drawButtons(){this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_1,cast.framework.ui.ControlsButton.QUEUE_PREV),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,cast.framework.ui.ControlsButton.CAPTIONS),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_2,cast.framework.ui.ControlsButton.SEEK_FORWARD_15),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_2,cast.framework.ui.ControlsButton.QUEUE_NEXT)}bindInterceptors(){this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.LOAD,this.onLoadRequest.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PLAY,this.onPlay.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PAUSE,this.onPause.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.SEEK,this.onSeek.bind(this))}bindMethods(){this.bindInterceptors=this.bindInterceptors.bind(this),this.onLoadRequest=this.onLoadRequest.bind(this),this.attachMedia=this.attachMedia.bind(this),this.start=this.start.bind(this),this.addPlayerEvents=this.addPlayerEvents.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onPlay=this.onPlay.bind(this),this.onPause=this.onPause.bind(this),this.updatePlayerState=this.updatePlayerState.bind(this)}onLoadRequest(t){return this.castDebugLogger.debug("VPreceiver",t.media.contentId),this.castDebugLogger.debug("VPreceiver1",Hls.isSupported()),this.audioObject.file=t.media.contentId,this.audioObject.duration=t.media.metadata.duration,this.currentTime=t.currentTime,this.playbackRate=t.playbackRate,this.autoplay=t.autoplay,this.attachMedia(),null}addBreaks(t){return castDebugLogger.debug(LOG_RECEIVER_TAG,"addBreaks: "+JSON.stringify(t)),fetchMediaById("fbb_ad").then((e=>{t.breakClips=[{id:"fbb_ad",title:e.title,contentUrl:e.stream.dash,contentType:"application/dash+xml",whenSkippable:5}],t.breaks=[{id:"pre-roll",breakClipIds:["fbb_ad"],position:0}]}))}fetchMediaById(t){return castDebugLogger.debug(LOG_RECEIVER_TAG,"fetching id: "+t),new Promise(((e,s)=>{fetch(CONTENT_URL).then((t=>t.json())).then((i=>{i?i[t]?e(i[t]):s(`${t} not found in repository`):s("Content repository not found.")}))}))}}(e,s);return i.init(),i}e.HLSsupported=!1,window.vpReceiver=e})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,